#version 450

layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

const uint num_threads = 256;
const float pi = 3.1415926;

vec2 complex_add(vec2 c0, vec2 c1) {
    return vec2(c0.x+c1.x, c0.y+c1.y);
}

vec2 complex_sub(vec2 c0, vec2 c1) {
    return vec2(c0.x-c1.x, c0.y-c1.y);
}

vec2 complex_mul(vec2 c0, vec2 c1) {
    return vec2(c0.x*c1.x - c0.y*c1.y, c0.y*c1.x + c0.x*c1.y);
}

layout(std430, binding = 0) coherent buffer fft {
    vec2 fft_data[];
};

shared vec2 shared_row[2][512];

void butterfly(uint block_size, uint src, uint dst) {
    const uint index = gl_GlobalInvocationID.x;
    const uint k = index & (block_size - 1u);
    const uint offset = gl_GlobalInvocationID.y * num_threads * 2;

    const vec2 in0 = shared_row[src][index];
    const vec2 in1 = shared_row[src][index + num_threads];

    const float theta = pi * float(k) / float(block_size); // NOTE: not 2 * pi as stated in the paper!
    const vec2 c = vec2(cos(theta), sin(theta));
    const vec2 temp = complex_mul(in1, c);

    const uint dest = (index << 1) - k;

    shared_row[dst][dest] = complex_add(in0, temp);
    shared_row[dst][dest + block_size] = complex_sub(in0, temp);
}

// Radix-2 inverse FFT (modified)
// Ruobing Li, 'OpenCL Fast Fourier Transform', New York University, 2012
void main() {
    const uint index = gl_GlobalInvocationID.x + 512 * gl_GlobalInvocationID.y;
    shared_row[0][gl_GlobalInvocationID.x] = fft_data[index];
    memoryBarrierShared();
    barrier();

    for(uint i = 0; i < 9; i++) {
        const uint block_size = 1 << i;
        const uint src = i % 2;
        const uint dst = (i+1) % 2;
        butterfly(block_size, src, dst);
        memoryBarrierShared();
        barrier();
    }

    fft_data[index] = shared_row[1][gl_GlobalInvocationID.x];
}

